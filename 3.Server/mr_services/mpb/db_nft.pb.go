// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: db_nft.proto

package mpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DBAptosNFTNodeV2 struct {
	CollectionId            string                       `protobuf:"bytes,1,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	TokenDataId             string                       `protobuf:"bytes,2,opt,name=token_data_id,json=tokenDataId,proto3" json:"token_data_id,omitempty"`
	Description             string                       `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	TokenName               string                       `protobuf:"bytes,4,opt,name=token_name,json=tokenName,proto3" json:"token_name,omitempty"`
	TokenId                 uint32                       `protobuf:"varint,5,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	TokenProperties         *DBAptosNFTNodeV2_Properties `protobuf:"bytes,6,opt,name=token_properties,json=tokenProperties,proto3" json:"token_properties,omitempty"`
	TokenStandard           string                       `protobuf:"bytes,7,opt,name=token_standard,json=tokenStandard,proto3" json:"token_standard,omitempty"`
	TokenUri                string                       `protobuf:"bytes,8,opt,name=token_uri,json=tokenUri,proto3" json:"token_uri,omitempty"`
	TransactionTimestamp    string                       `protobuf:"bytes,9,opt,name=transaction_timestamp,json=transactionTimestamp,proto3" json:"transaction_timestamp,omitempty"`
	TransactionTimestampInt int64                        `protobuf:"varint,10,opt,name=transaction_timestamp_int,json=transactionTimestampInt,proto3" json:"transaction_timestamp_int,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                     `json:"-"`
	XXX_unrecognized        []byte                       `json:"-"`
	XXX_sizecache           int32                        `json:"-"`
}

func (m *DBAptosNFTNodeV2) Reset()         { *m = DBAptosNFTNodeV2{} }
func (m *DBAptosNFTNodeV2) String() string { return proto.CompactTextString(m) }
func (*DBAptosNFTNodeV2) ProtoMessage()    {}
func (*DBAptosNFTNodeV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c189d9007c69c61, []int{0}
}
func (m *DBAptosNFTNodeV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBAptosNFTNodeV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBAptosNFTNodeV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DBAptosNFTNodeV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBAptosNFTNodeV2.Merge(m, src)
}
func (m *DBAptosNFTNodeV2) XXX_Size() int {
	return m.Size()
}
func (m *DBAptosNFTNodeV2) XXX_DiscardUnknown() {
	xxx_messageInfo_DBAptosNFTNodeV2.DiscardUnknown(m)
}

var xxx_messageInfo_DBAptosNFTNodeV2 proto.InternalMessageInfo

func (m *DBAptosNFTNodeV2) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *DBAptosNFTNodeV2) GetTokenDataId() string {
	if m != nil {
		return m.TokenDataId
	}
	return ""
}

func (m *DBAptosNFTNodeV2) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *DBAptosNFTNodeV2) GetTokenName() string {
	if m != nil {
		return m.TokenName
	}
	return ""
}

func (m *DBAptosNFTNodeV2) GetTokenId() uint32 {
	if m != nil {
		return m.TokenId
	}
	return 0
}

func (m *DBAptosNFTNodeV2) GetTokenProperties() *DBAptosNFTNodeV2_Properties {
	if m != nil {
		return m.TokenProperties
	}
	return nil
}

func (m *DBAptosNFTNodeV2) GetTokenStandard() string {
	if m != nil {
		return m.TokenStandard
	}
	return ""
}

func (m *DBAptosNFTNodeV2) GetTokenUri() string {
	if m != nil {
		return m.TokenUri
	}
	return ""
}

func (m *DBAptosNFTNodeV2) GetTransactionTimestamp() string {
	if m != nil {
		return m.TransactionTimestamp
	}
	return ""
}

func (m *DBAptosNFTNodeV2) GetTransactionTimestampInt() int64 {
	if m != nil {
		return m.TransactionTimestampInt
	}
	return 0
}

type DBAptosNFTNodeV2_Properties struct {
	Prop1                string   `protobuf:"bytes,1,opt,name=prop1,proto3" json:"prop1,omitempty"`
	Prop2                string   `protobuf:"bytes,2,opt,name=prop2,proto3" json:"prop2,omitempty"`
	Quality              string   `protobuf:"bytes,3,opt,name=quality,proto3" json:"quality,omitempty"`
	WeaponId             string   `protobuf:"bytes,4,opt,name=weapon_id,json=weaponId,proto3" json:"weapon_id,omitempty"`
	WeaponType           string   `protobuf:"bytes,5,opt,name=weapon_type,json=weaponType,proto3" json:"weapon_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DBAptosNFTNodeV2_Properties) Reset()         { *m = DBAptosNFTNodeV2_Properties{} }
func (m *DBAptosNFTNodeV2_Properties) String() string { return proto.CompactTextString(m) }
func (*DBAptosNFTNodeV2_Properties) ProtoMessage()    {}
func (*DBAptosNFTNodeV2_Properties) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c189d9007c69c61, []int{0, 0}
}
func (m *DBAptosNFTNodeV2_Properties) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBAptosNFTNodeV2_Properties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBAptosNFTNodeV2_Properties.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DBAptosNFTNodeV2_Properties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBAptosNFTNodeV2_Properties.Merge(m, src)
}
func (m *DBAptosNFTNodeV2_Properties) XXX_Size() int {
	return m.Size()
}
func (m *DBAptosNFTNodeV2_Properties) XXX_DiscardUnknown() {
	xxx_messageInfo_DBAptosNFTNodeV2_Properties.DiscardUnknown(m)
}

var xxx_messageInfo_DBAptosNFTNodeV2_Properties proto.InternalMessageInfo

func (m *DBAptosNFTNodeV2_Properties) GetProp1() string {
	if m != nil {
		return m.Prop1
	}
	return ""
}

func (m *DBAptosNFTNodeV2_Properties) GetProp2() string {
	if m != nil {
		return m.Prop2
	}
	return ""
}

func (m *DBAptosNFTNodeV2_Properties) GetQuality() string {
	if m != nil {
		return m.Quality
	}
	return ""
}

func (m *DBAptosNFTNodeV2_Properties) GetWeaponId() string {
	if m != nil {
		return m.WeaponId
	}
	return ""
}

func (m *DBAptosNFTNodeV2_Properties) GetWeaponType() string {
	if m != nil {
		return m.WeaponType
	}
	return ""
}

func init() {
	proto.RegisterType((*DBAptosNFTNodeV2)(nil), "mpb.DBAptosNFTNodeV2")
	proto.RegisterType((*DBAptosNFTNodeV2_Properties)(nil), "mpb.DBAptosNFTNodeV2.Properties")
}

func init() { proto.RegisterFile("db_nft.proto", fileDescriptor_5c189d9007c69c61) }

var fileDescriptor_5c189d9007c69c61 = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x41, 0x8b, 0x13, 0x31,
	0x14, 0xc7, 0x8d, 0xdd, 0x6e, 0x3b, 0x6f, 0xb6, 0xba, 0x84, 0x95, 0xcd, 0x2a, 0x8e, 0xc3, 0x8a,
	0x30, 0xa7, 0x11, 0xbb, 0x37, 0x6f, 0x2e, 0x45, 0x18, 0x84, 0x22, 0x63, 0xf5, 0xe0, 0x65, 0xc8,
	0x34, 0x11, 0x82, 0x9d, 0x24, 0x66, 0x5e, 0x91, 0x7e, 0x0b, 0x8f, 0x7e, 0x24, 0x0f, 0x1e, 0xfc,
	0x08, 0x52, 0xbf, 0x88, 0x4c, 0x32, 0xb5, 0x45, 0x7a, 0x7c, 0xbf, 0xff, 0xff, 0x85, 0xf7, 0xde,
	0x3f, 0x70, 0x26, 0xea, 0x4a, 0x7f, 0xc2, 0xdc, 0x3a, 0x83, 0x86, 0x0e, 0x1a, 0x5b, 0x5f, 0xff,
	0x3c, 0x81, 0xf3, 0xd9, 0xed, 0x2b, 0x8b, 0xa6, 0x9d, 0xbf, 0x5e, 0xcc, 0x8d, 0x90, 0x1f, 0xa6,
	0xf4, 0x29, 0x4c, 0x96, 0x66, 0xb5, 0x92, 0x4b, 0x54, 0x46, 0x57, 0x4a, 0x30, 0x92, 0x92, 0x2c,
	0x2a, 0xcf, 0xf6, 0xb0, 0x10, 0xf4, 0x1a, 0x26, 0x68, 0x3e, 0x4b, 0x5d, 0x09, 0x8e, 0xbc, 0x33,
	0xdd, 0xf5, 0xa6, 0xd8, 0xc3, 0x19, 0x47, 0x5e, 0x08, 0x9a, 0x42, 0x2c, 0x64, 0xbb, 0x74, 0xca,
	0x76, 0x4d, 0x6c, 0x10, 0x1c, 0x07, 0x88, 0x3e, 0x06, 0x08, 0xaf, 0x68, 0xde, 0x48, 0x76, 0xe2,
	0x0d, 0x91, 0x27, 0x73, 0xde, 0x48, 0x7a, 0x05, 0xe3, 0x20, 0x2b, 0xc1, 0x86, 0x29, 0xc9, 0x26,
	0xe5, 0xc8, 0xd7, 0x85, 0xa0, 0x6f, 0xe0, 0x3c, 0x48, 0xd6, 0x19, 0x2b, 0x1d, 0x2a, 0xd9, 0xb2,
	0xd3, 0x94, 0x64, 0xf1, 0x34, 0xcd, 0x1b, 0x5b, 0xe7, 0xff, 0x6f, 0x95, 0xbf, 0xfd, 0xe7, 0x2b,
	0xef, 0xfb, 0xce, 0x3d, 0xa0, 0xcf, 0xe0, 0x5e, 0x78, 0xac, 0x45, 0xae, 0x05, 0x77, 0x82, 0x8d,
	0xfc, 0x28, 0x61, 0xc5, 0x77, 0x3d, 0xa4, 0x8f, 0x20, 0xcc, 0x56, 0xad, 0x9d, 0x62, 0x63, 0xef,
	0x08, 0xf3, 0xbd, 0x77, 0x8a, 0xde, 0xc0, 0x03, 0x74, 0x5c, 0xb7, 0x3c, 0x9c, 0x0d, 0x55, 0x23,
	0x5b, 0xe4, 0x8d, 0x65, 0x91, 0x37, 0x5e, 0x1c, 0x88, 0x8b, 0x9d, 0x46, 0x5f, 0xc2, 0xd5, 0xd1,
	0xa6, 0x4a, 0x69, 0x64, 0x90, 0x92, 0x6c, 0x50, 0x5e, 0x1e, 0x6b, 0x2c, 0x34, 0x3e, 0xfc, 0x46,
	0x00, 0x0e, 0x76, 0xb8, 0x80, 0x61, 0x77, 0x8a, 0x17, 0x7d, 0x5a, 0xa1, 0xd8, 0xd1, 0x69, 0x1f,
	0x4f, 0x28, 0x28, 0x83, 0xd1, 0x97, 0x35, 0x5f, 0x29, 0xdc, 0xf4, 0xa1, 0xec, 0xca, 0x6e, 0xc5,
	0xaf, 0x92, 0xdb, 0x90, 0x7b, 0xc8, 0x63, 0x1c, 0x40, 0x21, 0xe8, 0x13, 0x88, 0x7b, 0x11, 0x37,
	0x56, 0xfa, 0x44, 0xa2, 0x12, 0x02, 0x5a, 0x6c, 0xac, 0xbc, 0xbd, 0xfc, 0xb1, 0x4d, 0xc8, 0xaf,
	0x6d, 0x42, 0x7e, 0x6f, 0x13, 0xf2, 0xfd, 0x4f, 0x72, 0xe7, 0xe3, 0x30, 0x7f, 0xde, 0xd8, 0xba,
	0x3e, 0xf5, 0x7f, 0xee, 0xe6, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x63, 0x2b, 0xf9, 0xde, 0x83,
	0x02, 0x00, 0x00,
}

func (m *DBAptosNFTNodeV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBAptosNFTNodeV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DBAptosNFTNodeV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TransactionTimestampInt != 0 {
		i = encodeVarintDbNft(dAtA, i, uint64(m.TransactionTimestampInt))
		i--
		dAtA[i] = 0x50
	}
	if len(m.TransactionTimestamp) > 0 {
		i -= len(m.TransactionTimestamp)
		copy(dAtA[i:], m.TransactionTimestamp)
		i = encodeVarintDbNft(dAtA, i, uint64(len(m.TransactionTimestamp)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.TokenUri) > 0 {
		i -= len(m.TokenUri)
		copy(dAtA[i:], m.TokenUri)
		i = encodeVarintDbNft(dAtA, i, uint64(len(m.TokenUri)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TokenStandard) > 0 {
		i -= len(m.TokenStandard)
		copy(dAtA[i:], m.TokenStandard)
		i = encodeVarintDbNft(dAtA, i, uint64(len(m.TokenStandard)))
		i--
		dAtA[i] = 0x3a
	}
	if m.TokenProperties != nil {
		{
			size, err := m.TokenProperties.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDbNft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.TokenId != 0 {
		i = encodeVarintDbNft(dAtA, i, uint64(m.TokenId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.TokenName) > 0 {
		i -= len(m.TokenName)
		copy(dAtA[i:], m.TokenName)
		i = encodeVarintDbNft(dAtA, i, uint64(len(m.TokenName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintDbNft(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenDataId) > 0 {
		i -= len(m.TokenDataId)
		copy(dAtA[i:], m.TokenDataId)
		i = encodeVarintDbNft(dAtA, i, uint64(len(m.TokenDataId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CollectionId) > 0 {
		i -= len(m.CollectionId)
		copy(dAtA[i:], m.CollectionId)
		i = encodeVarintDbNft(dAtA, i, uint64(len(m.CollectionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DBAptosNFTNodeV2_Properties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBAptosNFTNodeV2_Properties) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DBAptosNFTNodeV2_Properties) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.WeaponType) > 0 {
		i -= len(m.WeaponType)
		copy(dAtA[i:], m.WeaponType)
		i = encodeVarintDbNft(dAtA, i, uint64(len(m.WeaponType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.WeaponId) > 0 {
		i -= len(m.WeaponId)
		copy(dAtA[i:], m.WeaponId)
		i = encodeVarintDbNft(dAtA, i, uint64(len(m.WeaponId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Quality) > 0 {
		i -= len(m.Quality)
		copy(dAtA[i:], m.Quality)
		i = encodeVarintDbNft(dAtA, i, uint64(len(m.Quality)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Prop2) > 0 {
		i -= len(m.Prop2)
		copy(dAtA[i:], m.Prop2)
		i = encodeVarintDbNft(dAtA, i, uint64(len(m.Prop2)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Prop1) > 0 {
		i -= len(m.Prop1)
		copy(dAtA[i:], m.Prop1)
		i = encodeVarintDbNft(dAtA, i, uint64(len(m.Prop1)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDbNft(dAtA []byte, offset int, v uint64) int {
	offset -= sovDbNft(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DBAptosNFTNodeV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollectionId)
	if l > 0 {
		n += 1 + l + sovDbNft(uint64(l))
	}
	l = len(m.TokenDataId)
	if l > 0 {
		n += 1 + l + sovDbNft(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovDbNft(uint64(l))
	}
	l = len(m.TokenName)
	if l > 0 {
		n += 1 + l + sovDbNft(uint64(l))
	}
	if m.TokenId != 0 {
		n += 1 + sovDbNft(uint64(m.TokenId))
	}
	if m.TokenProperties != nil {
		l = m.TokenProperties.Size()
		n += 1 + l + sovDbNft(uint64(l))
	}
	l = len(m.TokenStandard)
	if l > 0 {
		n += 1 + l + sovDbNft(uint64(l))
	}
	l = len(m.TokenUri)
	if l > 0 {
		n += 1 + l + sovDbNft(uint64(l))
	}
	l = len(m.TransactionTimestamp)
	if l > 0 {
		n += 1 + l + sovDbNft(uint64(l))
	}
	if m.TransactionTimestampInt != 0 {
		n += 1 + sovDbNft(uint64(m.TransactionTimestampInt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DBAptosNFTNodeV2_Properties) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Prop1)
	if l > 0 {
		n += 1 + l + sovDbNft(uint64(l))
	}
	l = len(m.Prop2)
	if l > 0 {
		n += 1 + l + sovDbNft(uint64(l))
	}
	l = len(m.Quality)
	if l > 0 {
		n += 1 + l + sovDbNft(uint64(l))
	}
	l = len(m.WeaponId)
	if l > 0 {
		n += 1 + l + sovDbNft(uint64(l))
	}
	l = len(m.WeaponType)
	if l > 0 {
		n += 1 + l + sovDbNft(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDbNft(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDbNft(x uint64) (n int) {
	return sovDbNft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DBAptosNFTNodeV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDbNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DBAptosNFTNodeV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DBAptosNFTNodeV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDbNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDbNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenDataId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDbNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDbNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenDataId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDbNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDbNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDbNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDbNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			m.TokenId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenProperties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDbNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDbNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenProperties == nil {
				m.TokenProperties = &DBAptosNFTNodeV2_Properties{}
			}
			if err := m.TokenProperties.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenStandard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDbNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDbNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenStandard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDbNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDbNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDbNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDbNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionTimestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionTimestampInt", wireType)
			}
			m.TransactionTimestampInt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionTimestampInt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDbNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDbNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DBAptosNFTNodeV2_Properties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDbNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Properties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Properties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prop1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDbNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDbNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prop1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prop2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDbNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDbNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prop2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDbNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDbNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Quality = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeaponId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDbNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDbNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WeaponId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeaponType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDbNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDbNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WeaponType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDbNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDbNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDbNft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDbNft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDbNft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDbNft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDbNft
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDbNft
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDbNft
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDbNft        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDbNft          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDbNft = fmt.Errorf("proto: unexpected end of group")
)
