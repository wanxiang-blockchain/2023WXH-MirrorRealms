// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: grpc_account.proto

package mpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccountService_LoginByPassword_FullMethodName              = "/mpb.AccountService/LoginByPassword"
	AccountService_GetAccountInfo_FullMethodName               = "/mpb.AccountService/GetAccountInfo"
	AccountService_GetAccountInfoByAccount_FullMethodName      = "/mpb.AccountService/GetAccountInfoByAccount"
	AccountService_GenerateNonce_FullMethodName                = "/mpb.AccountService/GenerateNonce"
	AccountService_WebLoginByWallet_FullMethodName             = "/mpb.AccountService/WebLoginByWallet"
	AccountService_GenerateAndSendEmailBindCode_FullMethodName = "/mpb.AccountService/GenerateAndSendEmailBindCode"
	AccountService_WebBindEmail_FullMethodName                 = "/mpb.AccountService/WebBindEmail"
	AccountService_GetAptosAccount_FullMethodName              = "/mpb.AccountService/GetAptosAccount"
	AccountService_ChangePassword_FullMethodName               = "/mpb.AccountService/ChangePassword"
	AccountService_SendEmailResetPasswordCode_FullMethodName   = "/mpb.AccountService/SendEmailResetPasswordCode"
	AccountService_CheckEmailResetPasswordCode_FullMethodName  = "/mpb.AccountService/CheckEmailResetPasswordCode"
	AccountService_ResetPasswordByEmail_FullMethodName         = "/mpb.AccountService/ResetPasswordByEmail"
	AccountService_ResetPasswordByEmailAndVCode_FullMethodName = "/mpb.AccountService/ResetPasswordByEmailAndVCode"
)

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceClient interface {
	// rpc RegisterAccount(ReqRegisterAccount) returns (AccountInfo);
	LoginByPassword(ctx context.Context, in *ReqLoginByPassword, opts ...grpc.CallOption) (*ResLoginByPassword, error)
	GetAccountInfo(ctx context.Context, in *ReqUserId, opts ...grpc.CallOption) (*AccountInfo, error)
	GetAccountInfoByAccount(ctx context.Context, in *ReqGetAccountInfoByAccount, opts ...grpc.CallOption) (*AccountInfo, error)
	GenerateNonce(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ResGenerateNonce, error)
	WebLoginByWallet(ctx context.Context, in *ReqWebLoginByWallet, opts ...grpc.CallOption) (*ResWebLoginByWallet, error)
	GenerateAndSendEmailBindCode(ctx context.Context, in *ReqGenerateAndSendEmailBindCode, opts ...grpc.CallOption) (*Empty, error)
	WebBindEmail(ctx context.Context, in *ReqWebBindEmail, opts ...grpc.CallOption) (*ResWebBindEmail, error)
	GetAptosAccount(ctx context.Context, in *ReqUserId, opts ...grpc.CallOption) (*ResGetAptosAccount, error)
	ChangePassword(ctx context.Context, in *ReqChangePassword, opts ...grpc.CallOption) (*Empty, error)
	SendEmailResetPasswordCode(ctx context.Context, in *ReqSendEmailResetPasswordCode, opts ...grpc.CallOption) (*Empty, error)
	CheckEmailResetPasswordCode(ctx context.Context, in *ReqCheckEmailResetPasswordCode, opts ...grpc.CallOption) (*ResCheckEmailResetPasswordCode, error)
	ResetPasswordByEmail(ctx context.Context, in *ReqResetPasswordByEmail, opts ...grpc.CallOption) (*Empty, error)
	ResetPasswordByEmailAndVCode(ctx context.Context, in *ReqResetPasswordByEmailAndVCode, opts ...grpc.CallOption) (*Empty, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) LoginByPassword(ctx context.Context, in *ReqLoginByPassword, opts ...grpc.CallOption) (*ResLoginByPassword, error) {
	out := new(ResLoginByPassword)
	err := c.cc.Invoke(ctx, AccountService_LoginByPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetAccountInfo(ctx context.Context, in *ReqUserId, opts ...grpc.CallOption) (*AccountInfo, error) {
	out := new(AccountInfo)
	err := c.cc.Invoke(ctx, AccountService_GetAccountInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetAccountInfoByAccount(ctx context.Context, in *ReqGetAccountInfoByAccount, opts ...grpc.CallOption) (*AccountInfo, error) {
	out := new(AccountInfo)
	err := c.cc.Invoke(ctx, AccountService_GetAccountInfoByAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GenerateNonce(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ResGenerateNonce, error) {
	out := new(ResGenerateNonce)
	err := c.cc.Invoke(ctx, AccountService_GenerateNonce_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) WebLoginByWallet(ctx context.Context, in *ReqWebLoginByWallet, opts ...grpc.CallOption) (*ResWebLoginByWallet, error) {
	out := new(ResWebLoginByWallet)
	err := c.cc.Invoke(ctx, AccountService_WebLoginByWallet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GenerateAndSendEmailBindCode(ctx context.Context, in *ReqGenerateAndSendEmailBindCode, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AccountService_GenerateAndSendEmailBindCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) WebBindEmail(ctx context.Context, in *ReqWebBindEmail, opts ...grpc.CallOption) (*ResWebBindEmail, error) {
	out := new(ResWebBindEmail)
	err := c.cc.Invoke(ctx, AccountService_WebBindEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetAptosAccount(ctx context.Context, in *ReqUserId, opts ...grpc.CallOption) (*ResGetAptosAccount, error) {
	out := new(ResGetAptosAccount)
	err := c.cc.Invoke(ctx, AccountService_GetAptosAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) ChangePassword(ctx context.Context, in *ReqChangePassword, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AccountService_ChangePassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) SendEmailResetPasswordCode(ctx context.Context, in *ReqSendEmailResetPasswordCode, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AccountService_SendEmailResetPasswordCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) CheckEmailResetPasswordCode(ctx context.Context, in *ReqCheckEmailResetPasswordCode, opts ...grpc.CallOption) (*ResCheckEmailResetPasswordCode, error) {
	out := new(ResCheckEmailResetPasswordCode)
	err := c.cc.Invoke(ctx, AccountService_CheckEmailResetPasswordCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) ResetPasswordByEmail(ctx context.Context, in *ReqResetPasswordByEmail, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AccountService_ResetPasswordByEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) ResetPasswordByEmailAndVCode(ctx context.Context, in *ReqResetPasswordByEmailAndVCode, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AccountService_ResetPasswordByEmailAndVCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations must embed UnimplementedAccountServiceServer
// for forward compatibility
type AccountServiceServer interface {
	// rpc RegisterAccount(ReqRegisterAccount) returns (AccountInfo);
	LoginByPassword(context.Context, *ReqLoginByPassword) (*ResLoginByPassword, error)
	GetAccountInfo(context.Context, *ReqUserId) (*AccountInfo, error)
	GetAccountInfoByAccount(context.Context, *ReqGetAccountInfoByAccount) (*AccountInfo, error)
	GenerateNonce(context.Context, *Empty) (*ResGenerateNonce, error)
	WebLoginByWallet(context.Context, *ReqWebLoginByWallet) (*ResWebLoginByWallet, error)
	GenerateAndSendEmailBindCode(context.Context, *ReqGenerateAndSendEmailBindCode) (*Empty, error)
	WebBindEmail(context.Context, *ReqWebBindEmail) (*ResWebBindEmail, error)
	GetAptosAccount(context.Context, *ReqUserId) (*ResGetAptosAccount, error)
	ChangePassword(context.Context, *ReqChangePassword) (*Empty, error)
	SendEmailResetPasswordCode(context.Context, *ReqSendEmailResetPasswordCode) (*Empty, error)
	CheckEmailResetPasswordCode(context.Context, *ReqCheckEmailResetPasswordCode) (*ResCheckEmailResetPasswordCode, error)
	ResetPasswordByEmail(context.Context, *ReqResetPasswordByEmail) (*Empty, error)
	ResetPasswordByEmailAndVCode(context.Context, *ReqResetPasswordByEmailAndVCode) (*Empty, error)
	mustEmbedUnimplementedAccountServiceServer()
}

// UnimplementedAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServiceServer struct {
}

func (UnimplementedAccountServiceServer) LoginByPassword(context.Context, *ReqLoginByPassword) (*ResLoginByPassword, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByPassword not implemented")
}
func (UnimplementedAccountServiceServer) GetAccountInfo(context.Context, *ReqUserId) (*AccountInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountInfo not implemented")
}
func (UnimplementedAccountServiceServer) GetAccountInfoByAccount(context.Context, *ReqGetAccountInfoByAccount) (*AccountInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountInfoByAccount not implemented")
}
func (UnimplementedAccountServiceServer) GenerateNonce(context.Context, *Empty) (*ResGenerateNonce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateNonce not implemented")
}
func (UnimplementedAccountServiceServer) WebLoginByWallet(context.Context, *ReqWebLoginByWallet) (*ResWebLoginByWallet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebLoginByWallet not implemented")
}
func (UnimplementedAccountServiceServer) GenerateAndSendEmailBindCode(context.Context, *ReqGenerateAndSendEmailBindCode) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAndSendEmailBindCode not implemented")
}
func (UnimplementedAccountServiceServer) WebBindEmail(context.Context, *ReqWebBindEmail) (*ResWebBindEmail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebBindEmail not implemented")
}
func (UnimplementedAccountServiceServer) GetAptosAccount(context.Context, *ReqUserId) (*ResGetAptosAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAptosAccount not implemented")
}
func (UnimplementedAccountServiceServer) ChangePassword(context.Context, *ReqChangePassword) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedAccountServiceServer) SendEmailResetPasswordCode(context.Context, *ReqSendEmailResetPasswordCode) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailResetPasswordCode not implemented")
}
func (UnimplementedAccountServiceServer) CheckEmailResetPasswordCode(context.Context, *ReqCheckEmailResetPasswordCode) (*ResCheckEmailResetPasswordCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEmailResetPasswordCode not implemented")
}
func (UnimplementedAccountServiceServer) ResetPasswordByEmail(context.Context, *ReqResetPasswordByEmail) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPasswordByEmail not implemented")
}
func (UnimplementedAccountServiceServer) ResetPasswordByEmailAndVCode(context.Context, *ReqResetPasswordByEmailAndVCode) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPasswordByEmailAndVCode not implemented")
}
func (UnimplementedAccountServiceServer) mustEmbedUnimplementedAccountServiceServer() {}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s grpc.ServiceRegistrar, srv AccountServiceServer) {
	s.RegisterService(&AccountService_ServiceDesc, srv)
}

func _AccountService_LoginByPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqLoginByPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).LoginByPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_LoginByPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).LoginByPassword(ctx, req.(*ReqLoginByPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetAccountInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAccountInfo(ctx, req.(*ReqUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetAccountInfoByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetAccountInfoByAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAccountInfoByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetAccountInfoByAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAccountInfoByAccount(ctx, req.(*ReqGetAccountInfoByAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GenerateNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GenerateNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GenerateNonce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GenerateNonce(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_WebLoginByWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWebLoginByWallet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).WebLoginByWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_WebLoginByWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).WebLoginByWallet(ctx, req.(*ReqWebLoginByWallet))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GenerateAndSendEmailBindCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGenerateAndSendEmailBindCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GenerateAndSendEmailBindCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GenerateAndSendEmailBindCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GenerateAndSendEmailBindCode(ctx, req.(*ReqGenerateAndSendEmailBindCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_WebBindEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWebBindEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).WebBindEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_WebBindEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).WebBindEmail(ctx, req.(*ReqWebBindEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetAptosAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAptosAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetAptosAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAptosAccount(ctx, req.(*ReqUserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqChangePassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).ChangePassword(ctx, req.(*ReqChangePassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_SendEmailResetPasswordCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendEmailResetPasswordCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).SendEmailResetPasswordCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_SendEmailResetPasswordCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).SendEmailResetPasswordCode(ctx, req.(*ReqSendEmailResetPasswordCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_CheckEmailResetPasswordCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCheckEmailResetPasswordCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CheckEmailResetPasswordCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_CheckEmailResetPasswordCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CheckEmailResetPasswordCode(ctx, req.(*ReqCheckEmailResetPasswordCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_ResetPasswordByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqResetPasswordByEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).ResetPasswordByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_ResetPasswordByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).ResetPasswordByEmail(ctx, req.(*ReqResetPasswordByEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_ResetPasswordByEmailAndVCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqResetPasswordByEmailAndVCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).ResetPasswordByEmailAndVCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_ResetPasswordByEmailAndVCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).ResetPasswordByEmailAndVCode(ctx, req.(*ReqResetPasswordByEmailAndVCode))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountService_ServiceDesc is the grpc.ServiceDesc for AccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mpb.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginByPassword",
			Handler:    _AccountService_LoginByPassword_Handler,
		},
		{
			MethodName: "GetAccountInfo",
			Handler:    _AccountService_GetAccountInfo_Handler,
		},
		{
			MethodName: "GetAccountInfoByAccount",
			Handler:    _AccountService_GetAccountInfoByAccount_Handler,
		},
		{
			MethodName: "GenerateNonce",
			Handler:    _AccountService_GenerateNonce_Handler,
		},
		{
			MethodName: "WebLoginByWallet",
			Handler:    _AccountService_WebLoginByWallet_Handler,
		},
		{
			MethodName: "GenerateAndSendEmailBindCode",
			Handler:    _AccountService_GenerateAndSendEmailBindCode_Handler,
		},
		{
			MethodName: "WebBindEmail",
			Handler:    _AccountService_WebBindEmail_Handler,
		},
		{
			MethodName: "GetAptosAccount",
			Handler:    _AccountService_GetAptosAccount_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _AccountService_ChangePassword_Handler,
		},
		{
			MethodName: "SendEmailResetPasswordCode",
			Handler:    _AccountService_SendEmailResetPasswordCode_Handler,
		},
		{
			MethodName: "CheckEmailResetPasswordCode",
			Handler:    _AccountService_CheckEmailResetPasswordCode_Handler,
		},
		{
			MethodName: "ResetPasswordByEmail",
			Handler:    _AccountService_ResetPasswordByEmail_Handler,
		},
		{
			MethodName: "ResetPasswordByEmailAndVCode",
			Handler:    _AccountService_ResetPasswordByEmailAndVCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_account.proto",
}
