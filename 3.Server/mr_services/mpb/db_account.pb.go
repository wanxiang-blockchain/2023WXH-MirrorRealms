// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: db_account.proto

package mpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Account
type DBAccountInfo struct {
	Account              string   `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	UserId               uint64   `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DeviceId             string   `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	Device               string   `protobuf:"bytes,4,opt,name=device,proto3" json:"device,omitempty"`
	Os                   string   `protobuf:"bytes,5,opt,name=os,proto3" json:"os,omitempty"`
	Region               string   `protobuf:"bytes,6,opt,name=region,proto3" json:"region,omitempty"`
	Password             string   `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"`
	IsVerified           uint32   `protobuf:"varint,8,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
	Guest                bool     `protobuf:"varint,9,opt,name=guest,proto3" json:"guest,omitempty"`
	RegisterTime         int64    `protobuf:"varint,10,opt,name=register_time,json=registerTime,proto3" json:"register_time,omitempty"`
	Tel                  string   `protobuf:"bytes,11,opt,name=tel,proto3" json:"tel,omitempty"`
	Email                string   `protobuf:"bytes,12,opt,name=email,proto3" json:"email,omitempty"`
	Platform             string   `protobuf:"bytes,13,opt,name=platform,proto3" json:"platform,omitempty"`
	AptosAccAddr         string   `protobuf:"bytes,14,opt,name=aptos_acc_addr,json=aptosAccAddr,proto3" json:"aptos_acc_addr,omitempty"`
	PublicKey            []byte   `protobuf:"bytes,15,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Nickname             string   `protobuf:"bytes,16,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Icon                 string   `protobuf:"bytes,17,opt,name=icon,proto3" json:"icon,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DBAccountInfo) Reset()         { *m = DBAccountInfo{} }
func (m *DBAccountInfo) String() string { return proto.CompactTextString(m) }
func (*DBAccountInfo) ProtoMessage()    {}
func (*DBAccountInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_893ddd182b186dba, []int{0}
}
func (m *DBAccountInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBAccountInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBAccountInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DBAccountInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBAccountInfo.Merge(m, src)
}
func (m *DBAccountInfo) XXX_Size() int {
	return m.Size()
}
func (m *DBAccountInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DBAccountInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DBAccountInfo proto.InternalMessageInfo

func (m *DBAccountInfo) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *DBAccountInfo) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *DBAccountInfo) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *DBAccountInfo) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *DBAccountInfo) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *DBAccountInfo) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *DBAccountInfo) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *DBAccountInfo) GetIsVerified() uint32 {
	if m != nil {
		return m.IsVerified
	}
	return 0
}

func (m *DBAccountInfo) GetGuest() bool {
	if m != nil {
		return m.Guest
	}
	return false
}

func (m *DBAccountInfo) GetRegisterTime() int64 {
	if m != nil {
		return m.RegisterTime
	}
	return 0
}

func (m *DBAccountInfo) GetTel() string {
	if m != nil {
		return m.Tel
	}
	return ""
}

func (m *DBAccountInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *DBAccountInfo) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *DBAccountInfo) GetAptosAccAddr() string {
	if m != nil {
		return m.AptosAccAddr
	}
	return ""
}

func (m *DBAccountInfo) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *DBAccountInfo) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *DBAccountInfo) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

type DBWalletAcc struct {
	Account              string   `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	UserId               uint64   `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DBWalletAcc) Reset()         { *m = DBWalletAcc{} }
func (m *DBWalletAcc) String() string { return proto.CompactTextString(m) }
func (*DBWalletAcc) ProtoMessage()    {}
func (*DBWalletAcc) Descriptor() ([]byte, []int) {
	return fileDescriptor_893ddd182b186dba, []int{1}
}
func (m *DBWalletAcc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBWalletAcc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBWalletAcc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DBWalletAcc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBWalletAcc.Merge(m, src)
}
func (m *DBWalletAcc) XXX_Size() int {
	return m.Size()
}
func (m *DBWalletAcc) XXX_DiscardUnknown() {
	xxx_messageInfo_DBWalletAcc.DiscardUnknown(m)
}

var xxx_messageInfo_DBWalletAcc proto.InternalMessageInfo

func (m *DBWalletAcc) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *DBWalletAcc) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type DBTokenInfo struct {
	Account              string   `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Device               string   `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	DeviceId             string   `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DBTokenInfo) Reset()         { *m = DBTokenInfo{} }
func (m *DBTokenInfo) String() string { return proto.CompactTextString(m) }
func (*DBTokenInfo) ProtoMessage()    {}
func (*DBTokenInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_893ddd182b186dba, []int{2}
}
func (m *DBTokenInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBTokenInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBTokenInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DBTokenInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBTokenInfo.Merge(m, src)
}
func (m *DBTokenInfo) XXX_Size() int {
	return m.Size()
}
func (m *DBTokenInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DBTokenInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DBTokenInfo proto.InternalMessageInfo

func (m *DBTokenInfo) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *DBTokenInfo) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *DBTokenInfo) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func init() {
	proto.RegisterType((*DBAccountInfo)(nil), "mpb.DBAccountInfo")
	proto.RegisterType((*DBWalletAcc)(nil), "mpb.DBWalletAcc")
	proto.RegisterType((*DBTokenInfo)(nil), "mpb.DBTokenInfo")
}

func init() { proto.RegisterFile("db_account.proto", fileDescriptor_893ddd182b186dba) }

var fileDescriptor_893ddd182b186dba = []byte{
	// 411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xcd, 0x8e, 0xd3, 0x30,
	0x10, 0x80, 0x71, 0xd3, 0xdf, 0xe9, 0x0f, 0xc5, 0x42, 0xec, 0x08, 0x44, 0x89, 0x0a, 0x87, 0x9c,
	0x96, 0x03, 0x2f, 0x40, 0xab, 0xbd, 0x54, 0xdc, 0xa2, 0x15, 0x48, 0x08, 0x29, 0x4a, 0xec, 0xe9,
	0xca, 0x6a, 0x12, 0x47, 0xb1, 0xbb, 0x68, 0xdf, 0x84, 0x47, 0xe2, 0xd8, 0x47, 0x40, 0xe5, 0x45,
	0x90, 0xed, 0x54, 0x88, 0x0b, 0x48, 0xdc, 0xe6, 0xfb, 0x66, 0x32, 0x63, 0x65, 0x06, 0x96, 0xb2,
	0xc8, 0x72, 0x21, 0xf4, 0xb1, 0xb6, 0xd7, 0x4d, 0xab, 0xad, 0xe6, 0x51, 0xd5, 0x14, 0xeb, 0x53,
	0x04, 0xf3, 0x9b, 0xed, 0x26, 0x24, 0x76, 0xf5, 0x5e, 0x73, 0x84, 0x51, 0x57, 0x87, 0x2c, 0x66,
	0xc9, 0x24, 0xbd, 0x20, 0xbf, 0x82, 0xd1, 0xd1, 0x50, 0x9b, 0x29, 0x89, 0xbd, 0x98, 0x25, 0xfd,
	0x74, 0xe8, 0x70, 0x27, 0xf9, 0x0b, 0x98, 0x48, 0xba, 0x57, 0x82, 0x5c, 0x2a, 0xf2, 0x1f, 0x8d,
	0x83, 0xd8, 0x49, 0xfe, 0x0c, 0x86, 0x21, 0xc6, 0xbe, 0xcf, 0x74, 0xc4, 0x17, 0xd0, 0xd3, 0x06,
	0x07, 0xde, 0xf5, 0xb4, 0x71, 0x75, 0x2d, 0xdd, 0x29, 0x5d, 0xe3, 0x30, 0xd4, 0x05, 0xe2, 0xcf,
	0x61, 0xdc, 0xe4, 0xc6, 0x7c, 0xd5, 0xad, 0xc4, 0x51, 0xe8, 0x7d, 0x61, 0xfe, 0x0a, 0xa6, 0xca,
	0x64, 0xf7, 0xd4, 0xaa, 0xbd, 0x22, 0x89, 0xe3, 0x98, 0x25, 0xf3, 0x14, 0x94, 0xf9, 0xd8, 0x19,
	0xfe, 0x14, 0x06, 0x77, 0x47, 0x32, 0x16, 0x27, 0x31, 0x4b, 0xc6, 0x69, 0x00, 0xfe, 0x1a, 0xe6,
	0xae, 0xb9, 0xb1, 0xd4, 0x66, 0x56, 0x55, 0x84, 0x10, 0xb3, 0x24, 0x4a, 0x67, 0x17, 0x79, 0xab,
	0x2a, 0xe2, 0x4b, 0x88, 0x2c, 0x95, 0x38, 0xf5, 0x23, 0x5d, 0xe8, 0x9a, 0x51, 0x95, 0xab, 0x12,
	0x67, 0xde, 0x05, 0xf0, 0xef, 0x2b, 0x73, 0xbb, 0xd7, 0x6d, 0x85, 0xf3, 0xee, 0x7d, 0x1d, 0xf3,
	0x37, 0xb0, 0xc8, 0x1b, 0xab, 0x8d, 0xfb, 0xf3, 0x59, 0x2e, 0x65, 0x8b, 0x0b, 0x5f, 0x31, 0xf3,
	0x76, 0x23, 0xc4, 0x46, 0xca, 0x96, 0xbf, 0x04, 0x68, 0x8e, 0x45, 0xa9, 0x44, 0x76, 0xa0, 0x07,
	0x7c, 0x1c, 0xb3, 0x64, 0x96, 0x4e, 0x82, 0xf9, 0x40, 0x0f, 0x6e, 0x40, 0xad, 0xc4, 0xa1, 0xce,
	0x2b, 0xc2, 0x65, 0x18, 0x70, 0x61, 0xce, 0xa1, 0xaf, 0x84, 0xae, 0xf1, 0x89, 0xf7, 0x3e, 0x5e,
	0xbf, 0x87, 0xe9, 0xcd, 0xf6, 0x53, 0x5e, 0x96, 0x64, 0x37, 0x42, 0xfc, 0xc7, 0x3e, 0xd7, 0x5f,
	0x5c, 0x87, 0x5b, 0x7d, 0xa0, 0xfa, 0x1f, 0x17, 0xf1, 0x7b, 0xb7, 0xbd, 0x3f, 0x76, 0xfb, 0xb7,
	0x83, 0xd8, 0x5e, 0x7d, 0x3f, 0xaf, 0xd8, 0xe9, 0xbc, 0x62, 0x3f, 0xce, 0x2b, 0xf6, 0xed, 0xe7,
	0xea, 0xd1, 0xe7, 0xc1, 0xf5, 0xdb, 0xaa, 0x29, 0x8a, 0xa1, 0xbf, 0xcb, 0x77, 0xbf, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x6c, 0x20, 0xf0, 0x6f, 0xab, 0x02, 0x00, 0x00,
}

func (m *DBAccountInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBAccountInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DBAccountInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintDbAccount(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintDbAccount(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintDbAccount(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.AptosAccAddr) > 0 {
		i -= len(m.AptosAccAddr)
		copy(dAtA[i:], m.AptosAccAddr)
		i = encodeVarintDbAccount(dAtA, i, uint64(len(m.AptosAccAddr)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Platform) > 0 {
		i -= len(m.Platform)
		copy(dAtA[i:], m.Platform)
		i = encodeVarintDbAccount(dAtA, i, uint64(len(m.Platform)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintDbAccount(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Tel) > 0 {
		i -= len(m.Tel)
		copy(dAtA[i:], m.Tel)
		i = encodeVarintDbAccount(dAtA, i, uint64(len(m.Tel)))
		i--
		dAtA[i] = 0x5a
	}
	if m.RegisterTime != 0 {
		i = encodeVarintDbAccount(dAtA, i, uint64(m.RegisterTime))
		i--
		dAtA[i] = 0x50
	}
	if m.Guest {
		i--
		if m.Guest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.IsVerified != 0 {
		i = encodeVarintDbAccount(dAtA, i, uint64(m.IsVerified))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintDbAccount(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintDbAccount(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Os) > 0 {
		i -= len(m.Os)
		copy(dAtA[i:], m.Os)
		i = encodeVarintDbAccount(dAtA, i, uint64(len(m.Os)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintDbAccount(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DeviceId) > 0 {
		i -= len(m.DeviceId)
		copy(dAtA[i:], m.DeviceId)
		i = encodeVarintDbAccount(dAtA, i, uint64(len(m.DeviceId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.UserId != 0 {
		i = encodeVarintDbAccount(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintDbAccount(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DBWalletAcc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBWalletAcc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DBWalletAcc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UserId != 0 {
		i = encodeVarintDbAccount(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintDbAccount(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DBTokenInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBTokenInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DBTokenInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DeviceId) > 0 {
		i -= len(m.DeviceId)
		copy(dAtA[i:], m.DeviceId)
		i = encodeVarintDbAccount(dAtA, i, uint64(len(m.DeviceId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Device) > 0 {
		i -= len(m.Device)
		copy(dAtA[i:], m.Device)
		i = encodeVarintDbAccount(dAtA, i, uint64(len(m.Device)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintDbAccount(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDbAccount(dAtA []byte, offset int, v uint64) int {
	offset -= sovDbAccount(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DBAccountInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovDbAccount(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovDbAccount(uint64(m.UserId))
	}
	l = len(m.DeviceId)
	if l > 0 {
		n += 1 + l + sovDbAccount(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovDbAccount(uint64(l))
	}
	l = len(m.Os)
	if l > 0 {
		n += 1 + l + sovDbAccount(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovDbAccount(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovDbAccount(uint64(l))
	}
	if m.IsVerified != 0 {
		n += 1 + sovDbAccount(uint64(m.IsVerified))
	}
	if m.Guest {
		n += 2
	}
	if m.RegisterTime != 0 {
		n += 1 + sovDbAccount(uint64(m.RegisterTime))
	}
	l = len(m.Tel)
	if l > 0 {
		n += 1 + l + sovDbAccount(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovDbAccount(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovDbAccount(uint64(l))
	}
	l = len(m.AptosAccAddr)
	if l > 0 {
		n += 1 + l + sovDbAccount(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovDbAccount(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 2 + l + sovDbAccount(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 2 + l + sovDbAccount(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DBWalletAcc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovDbAccount(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovDbAccount(uint64(m.UserId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DBTokenInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovDbAccount(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovDbAccount(uint64(l))
	}
	l = len(m.DeviceId)
	if l > 0 {
		n += 1 + l + sovDbAccount(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDbAccount(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDbAccount(x uint64) (n int) {
	return sovDbAccount(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DBAccountInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDbAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DBAccountInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DBAccountInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDbAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDbAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDbAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDbAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDbAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDbAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDbAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDbAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Os = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDbAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDbAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDbAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDbAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVerified", wireType)
			}
			m.IsVerified = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsVerified |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Guest = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterTime", wireType)
			}
			m.RegisterTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegisterTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDbAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDbAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDbAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDbAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDbAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDbAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AptosAccAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDbAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDbAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AptosAccAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDbAccount
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDbAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDbAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDbAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDbAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDbAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDbAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDbAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DBWalletAcc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDbAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DBWalletAcc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DBWalletAcc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDbAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDbAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDbAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDbAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DBTokenInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDbAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DBTokenInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DBTokenInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDbAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDbAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDbAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDbAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDbAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDbAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDbAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDbAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDbAccount(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDbAccount
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDbAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDbAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDbAccount
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDbAccount
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDbAccount
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDbAccount        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDbAccount          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDbAccount = fmt.Errorf("proto: unexpected end of group")
)
